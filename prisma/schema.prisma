datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  OWNER
  USER
}

enum ParkingLotStatus {
  OPEN
  CLOSED
}

enum ParkingLotAvailability {
  MORE_THAN_FIVE
  LESS_THAN_FIVE
  NO_AVAILABILITY
}

enum GlobalStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DELETED
}

enum Version {
  BETA
  V1
  V2
}

model Person {
  id           String       @id @default(uuid())
  names        String
  lastNames    String
  email        String       @unique
  phone        String
  cretedAt     DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User?
  globalStatus GlobalStatus @default(ACTIVE)
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String
  person       Person?      @relation(fields: [personId], references: [id])
  personId     String?      @unique
  role         Role         @default(USER)
  globalStatus GlobalStatus @default(ACTIVE)
  parkingLots  ParkingLot[]
  ratings      Rating[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ParkingLot {
  id            String                 @id @default(uuid())
  code          String                 @unique
  name          String
  address       String
  latitude      Float
  longitude     Float
  status        ParkingLotStatus
  availability  ParkingLotAvailability
  globalStatus  GlobalStatus           @default(ACTIVE)
  ownerId       String?
  owner         User?                  @relation(fields: [ownerId], references: [id])
  nodes         Node[]
  ratings       Rating[]
  averageRating Float                  @default(0.0)
  histories     ParkingLotHistory[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model ParkingLotHistory {
  id           String                 @id @default(uuid())
  parkingLotId String
  status       ParkingLotStatus
  availability ParkingLotAvailability
  globalStatus GlobalStatus           @default(ACTIVE)
  parkingLot   ParkingLot             @relation(fields: [parkingLotId], references: [id])
  updatedAt    DateTime               @default(now())
}

model Node {
  id           String       @id @default(uuid())
  code         String       @unique
  version      Version
  globalStatus GlobalStatus @default(ACTIVE)
  parkingLotId String?
  parkingLot   ParkingLot?  @relation(fields: [parkingLotId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Rating {
  id           String       @id @default(uuid())
  rating       Int
  comment      String?
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  parkingLotId String
  parkingLot   ParkingLot   @relation(fields: [parkingLotId], references: [id])
  globalStatus GlobalStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([userId, parkingLotId])
}
