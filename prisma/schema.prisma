datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  OWNER
  USER
}

enum ParkingLotStatus {
  OPEN
  CLOSED
}

enum ParkingLotAvailability {
  MORE_THAN_FIVE
  LESS_THAN_FIVE
  NO_AVAILABILITY
}

enum GlobalStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DELETED
}

enum Version {
  BETA
  V1
  V2
}

enum ReportReason {
  INCORRECT_INFO
  SAFETY_ISSUE
  BAD_SERVICE
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
}

model Person {
  id           String       @id @default(uuid())
  names        String
  lastNames    String
  email        String?
  phone        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User?
  globalStatus GlobalStatus @default(ACTIVE)
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  person             Person?              @relation(fields: [personId], references: [id])
  personId           String?              @unique
  role               Role                 @default(USER)
  globalStatus       GlobalStatus         @default(ACTIVE)
  parkingLots        ParkingLot[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Report             Report[]
  UserLocation       UserLocation[]
  RecentlyParkingLot RecentlyParkingLot[]
  UserSearch         UserSearch[]
}

model ParkingLot {
  id                 String                 @id @default(uuid())
  code               String                 @unique
  name               String
  address            String
  latitude           Float
  longitude          Float
  status             ParkingLotStatus
  availability       ParkingLotAvailability
  price              Float
  images             Json[]
  paymentMethods     String[]
  services           String[]
  phoneNumber        String
  globalStatus       GlobalStatus           @default(ACTIVE)
  ownerId            String?
  owner              User?                  @relation(fields: [ownerId], references: [id])
  nodes              Node[]
  histories          ParkingLotHistory[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  Report             Report[]
  RecentlyParkingLot RecentlyParkingLot[]
}

model ParkingLotHistory {
  id           String                 @id @default(uuid())
  parkingLotId String
  status       ParkingLotStatus
  availability ParkingLotAvailability
  globalStatus GlobalStatus           @default(ACTIVE)
  parkingLot   ParkingLot             @relation(fields: [parkingLotId], references: [id])
  updatedAt    DateTime               @default(now())
}

model Node {
  id           String       @id @default(uuid())
  code         String       @unique
  version      Version
  globalStatus GlobalStatus @default(ACTIVE)
  parkingLotId String?
  parkingLot   ParkingLot?  @relation(fields: [parkingLotId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Report {
  id           String       @id @default(uuid())
  reason       ReportReason
  comment      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  parkingLotId String
  parkingLot   ParkingLot   @relation(fields: [parkingLotId], references: [id])
}

model UserLocation {
  id        String   @id @default(uuid())
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model RecentlyParkingLot {
  id                  String     @id @default(uuid())
  userId              String
  destinationLocation Json
  distanceKm          Float?
  user                User       @relation(fields: [userId], references: [id])
  parkingLotId        String
  parkingLot          ParkingLot @relation(fields: [parkingLotId], references: [id])
  viewedAt            DateTime   @default(now())
}

model UserSearch {
  id                  String   @id @default(uuid())
  destinationLocation Json
  filters             Json?
  timestamp           DateTime @default(now())
  userId              String
  user                User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}
